
#-> ansible/requirements.yml
collections:
  - name: community.docker
    version: 3.8.0
  - name: community.general

#-> ansible/ansible.cfg
[defaults]
roles_path = ./roles
host_key_checking = False
interpreter_python = auto_silent
deprecation_warnings = False
retry_files_enabled = False

[ssh_connection]
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
pipelining = True
timeout = 30

#-> ansible/playbooks/deploy-odoo.yml
---
- name: Deploy Odoo
  hosts: odoo
  become: yes
  vars_files:
    - ../roles/odoo/defaults/main.yml
  pre_tasks:
    - name: Check system readiness
      ping:

  tasks:
    - name: Include docker setup tasks
      include_tasks: ../roles/odoo/tasks/docker.yml

    - name: Include deployment tasks
      include_tasks: ../roles/odoo/tasks/deploy.yml

  post_tasks:
    - name: Verify deployment
      shell: docker ps
      register: running_containers
      changed_when: false

    - name: Show running containers
      debug:
        var: running_containers.stdout_lines

#-> ansible/playbooks/update-odoo.yml
---
- name: Update Odoo Source Code and Restart
  hosts: odoo
  become: true
  vars_files:
    - ../roles/odoo/defaults/main.yml

  tasks:
    - name: Gather facts
      setup:

    - name: Configure GitHub credentials for submodules
      copy:
        dest: /root/.gitconfig
        content: |
          [credential]
              helper = store --file /root/.git-credentials
          [url "https://{{ github_user }}:{{ github_token }}@github.com"]
              insteadOf = https://github.com
        mode: '0600'

    - name: Configure .netrc for GitHub auth
      copy:
        dest: /root/.netrc
        content: |
          machine github.com
          login {{ github_user }}
          password {{ github_token }}
        mode: '0600'

    - name: Pull latest code
      command: git pull --recurse-submodules
      args:
        chdir: "{{ project_dir }}"

    - name: Sync and update submodules
      shell: |
        git submodule sync --recursive
        git submodule update --init --recursive --depth 1
      args:
        chdir: "{{ project_dir }}"
        executable: /bin/bash

    - name: Rebuild containers
      command: docker-compose build
      args:
        chdir: "{{ project_dir }}"

    - name: Restart containers
      command: docker-compose up -d
      args:
        chdir: "{{ project_dir }}"

    - name: Clean up GitHub credentials
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/.netrc
        - /root/.git-credentials
        - /root/.gitconfig

#-> ansible/inventory/production.ini

#-> ansible/roles/odoo/defaults/main.yml
---
project_dir: /home/odoo
repository_url: https://github.com/kajande/ordo.git
repository_branch: main
github_user: kajande
github_token: "{{ lookup('env', 'GIT_TOKEN') }}"
docker_packages:
  - docker-ce
  - docker-ce-cli
  - containerd.io

#-> ansible/roles/odoo/tasks/main.yml
---
- name: Ensure Docker is installed and running
  include_tasks: docker.yml

- name: Deploy Odoo application
  include_tasks: deploy.yml

#-> ansible/roles/odoo/tasks/deploy.yml
---
- name: Ensure project directory exists
  file:
    path: "{{ project_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Create .gitconfig directory
  file:
    path: /root/.gitconfig.d
    state: directory
    mode: 0755

- name: Configure Git credentials
  copy:
    content: |
      [credential]
          helper = store --file /root/.git-credentials
      [url "https://{{ github_user }}:{{ github_token }}@github.com"]
          insteadOf = https://github.com
    dest: /root/.gitconfig.d/github
    mode: 0644

- name: Create .netrc file for GitHub authentication
  copy:
    content: |
      machine github.com
      login {{ github_user }}
      password {{ github_token }}
    dest: /root/.netrc
    mode: 0600

- name: Clone or update repository
  git:
    repo: "{{ repository_url }}"
    dest: "{{ project_dir }}"
    version: "{{ repository_branch }}"
    force: yes
    update: yes
    depth: 1
  environment:
    GIT_CONFIG_GLOBAL: "/root/.gitconfig.d/github"
    GIT_ASKPASS: "/bin/echo"

- name: Initialize and update submodules
  shell: |
    cd "{{ project_dir }}"
    git submodule sync --recursive
    git submodule update --init --force --depth=1 --recursive
  args:
    executable: /bin/bash
  environment:
    GIT_CONFIG_GLOBAL: "/root/.gitconfig.d/github"
    GIT_ASKPASS: "/bin/echo"
  register: submodule_result
  retries: 3
  delay: 10
  until: submodule_result.rc == 0

- name: Verify submodules
  shell: |
    cd "{{ project_dir }}"
    git submodule status --recursive
  register: submodule_status
  changed_when: false

- name: Stop and remove containers
  command: docker-compose down -v
  args:
    chdir: "{{ project_dir }}"
  ignore_errors: yes

- name: Prune Docker system
  command: docker system prune -af --volumes
  ignore_errors: yes
  changed_when: false

- name: Build containers
  command: docker-compose build
  args:
    chdir: "{{ project_dir }}"

- name: Start containers
  command: docker-compose up -d
  args:
    chdir: "{{ project_dir }}"
  async: 600
  poll: 0
  register: compose_up

- name: Check container status
  async_status:
    jid: "{{ compose_up.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 30
  delay: 10

- name: Perform final cleanup
  block:
    - name: Placeholder for main block (could be real tasks)
      debug:
        msg: "Main deployment steps complete"
  always:
    - name: Remove .netrc file
      file:
        path: /root/.netrc
        state: absent

    - name: Remove git credentials
      file:
        path: /root/.git-credentials
        state: absent

    - name: Remove git config
      file:
        path: /root/.gitconfig.d/github
        state: absent

#-> ansible/roles/odoo/tasks/docker.yml
---
- name: Disable unattended upgrades temporarily
  shell: |
    systemctl stop unattended-upgrades || true
    systemctl mask unattended-upgrades || true
  changed_when: false

- name: Wait for apt lock to be released
  shell: |
    while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
      echo "Waiting for dpkg lock to be released..."
      sleep 10
    done
  args:
    executable: /bin/bash
  register: apt_wait_check
  until: apt_wait_check.rc == 0
  retries: 10
  delay: 15
  changed_when: false

- name: Install Docker prerequisites with retries
  block:
    - name: Install Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - git
          - unzip
        state: present
        update_cache: yes
        lock_timeout: 300
  rescue:
    - name: Wait and retry if apt failed due to lock
      pause:
        seconds: 30
    - name: Retry installing Docker prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - python3-pip
          - git
          - unzip
        state: present
        update_cache: yes
        lock_timeout: 300

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install Docker packages
  apt:
    name: "{{ docker_packages }}"
    state: present
    update_cache: yes
    lock_timeout: 300

- name: Ensure Docker service is running
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Add current user to docker group
  user:
    name: root
    groups: docker
    append: yes

- name: Upgrade pip
  pip:
    name: pip
    state: latest

- name: Install compatible Docker SDK and Compose
  pip:
    name:
      - docker==5.0.3
      - docker-compose==1.29.2
    state: present

- name: Validate Docker installation
  command: docker --version
  register: docker_version
  changed_when: false

- name: Show Docker version
  debug:
    var: docker_version.stdout

- name: Validate Docker Compose installation
  command: docker-compose --version
  register: compose_version
  changed_when: false

- name: Show Docker Compose version
  debug:
    var: compose_version.stdout

- name: Re-enable unattended upgrades
  shell: |
    systemctl unmask unattended-upgrades || true
    systemctl start unattended-upgrades || true
  changed_when: false
