name: Provision Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: apply
        type: choice
        options:
          - apply

env:
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  terraform-provision:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Validate DigitalOcean Token
        run: |
          if [ -z "${{ secrets.DO_TOKEN }}" ]; then
            echo "❌ DO_TOKEN secret is missing or empty"
            exit 1
          fi
          
          # Test token validity
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.DO_TOKEN }}" \
            "https://api.digitalocean.com/v2/account")
          
          if [ "$response" != "200" ]; then
            echo "❌ DigitalOcean token is invalid (HTTP $response)"
            exit 1
          fi
          
          echo "✅ DigitalOcean token is valid"

      - name: Validate Name.com API Credentials
        run: |
          # Check if username is set (as variable)
          if [ -z "${{ vars.NAMECOM_USERNAME }}" ]; then
            echo "❌ NAMECOM_USERNAME variable is missing or empty"
            exit 1
          fi
          
          # Check if token is set (as secret)
          if [ -z "${{ secrets.NAMECOM_TOKEN }}" ]; then
            echo "❌ NAMECOM_TOKEN secret is missing or empty"
            exit 1
          fi
          
          # Test API access with the correct credential types
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -u "${{ vars.NAMECOM_USERNAME }}:${{ secrets.NAMECOM_TOKEN }}" \
            "https://api.name.com/v4/domains/")
          
          if [ "$RESPONSE" != "200" ]; then
            echo "❌ Name.com API credentials are invalid (HTTP $RESPONSE)"
            echo "Username type: variable, Token type: secret"
            exit 1
          fi
          
          echo "✅ Name.com API credentials are valid"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          # This configures the credential file for Terraform CLI
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Generate secrets.auto.tfvars file
        working-directory: ./terraform
        run: |
          cat > secrets.auto.tfvars <<EOF
          environment      = "${{ inputs.environment }}"
          domain_name      = "kajande.com"
          do_token         = "${{ secrets.DO_TOKEN }}"
          namecom_username = "${{ vars.NAMECOM_USERNAME }}"
          namecom_token    = "${{ secrets.NAMECOM_TOKEN }}"
          EOF

      - name: Terraform Init (Cloud)
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Clean up orphaned resources from state
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          echo "=== Checking for orphaned resources from state ==="
          
          # Get all reserved IP resources from state
          RESERVED_IP_RESOURCES=$(terraform state list | grep reserved_ip || echo "")
          
          if [ -n "$RESERVED_IP_RESOURCES" ]; then
            echo "Found reserved IP resources in state:"
            echo "$RESERVED_IP_RESOURCES"
            
            # Check each one against DigitalOcean API
            echo "$RESERVED_IP_RESOURCES" | while read resource; do
              if [ -n "$resource" ]; then
                echo "Checking resource: $resource"
                
                # Get the IP from the state
                IP=$(terraform state show "$resource" 2>/dev/null | grep -E "ip_address.*=" | head -1 | sed 's/.*= "\([^"]*\)".*/\1/' || echo "")
                
                if [ -n "$IP" ]; then
                  echo "Found IP $IP in resource $resource"
                  
                  # Check if it exists in DigitalOcean
                  HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
                    -H "Authorization: Bearer ${{ secrets.DO_TOKEN }}" \
                    "https://api.digitalocean.com/v2/reserved_ips/$IP")
                  
                  if [ "$HTTP_CODE" = "404" ]; then
                    echo "❌ IP $IP not found in DigitalOcean - removing from state"
                    terraform state rm "$resource" || echo "Failed to remove $resource"
                  else
                    echo "✅ IP $IP exists in DigitalOcean"
                  fi
                fi
              fi
            done
          else
            echo "No reserved IP resources found in state"
          fi

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform apply -auto-approve

      - name: Cleanup sensitive files
        if: always()
        working-directory: ./terraform
        run: |
          rm -f secrets.auto.tfvars
          echo "✅ Cleaned up secrets.auto.tfvars file"
