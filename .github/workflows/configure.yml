name: Configure Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - production
          - staging
          - dev
      action:
        description: 'Configuration action'
        required: true
        default: apply
        type: choice
        options:
          - apply

env:
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  ansible-deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Install doctl
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Retrieve SSH Key from Terraform Remote State
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          terraform init -input=false -reconfigure

          SSH_KEY=$(terraform output -raw ssh_private_key)

          if [ -z "$SSH_KEY" ]; then
            echo "::error::No SSH key found in Terraform remote state"
            exit 1
          fi

          echo "$SSH_KEY" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          echo "SSH_KEY_FILE=/tmp/ssh_key" >> $GITHUB_ENV

      - name: Determine Droplet IP
        run: |
          clean_ip=$(doctl -t ${{ secrets.DO_TOKEN }} compute droplet list --format "Name,PublicIPv4,Tags" --no-header | \
            grep "odoo" | grep "${{ inputs.environment }}" | awk '{print $2}' | head -n1)

          if [ -z "$clean_ip" ]; then
            echo "::error::No active droplets found with both 'odoo' and '${{ inputs.environment }}' tags"
            echo "Available droplets:"
            doctl -t ${{ secrets.DO_TOKEN }} compute droplet list --format "Name,PublicIPv4,Tags"
            exit 1
          fi

          rm -f ansible/inventory/*
          mkdir -p ansible/inventory
          echo "[odoo]" > ansible/inventory/${{ inputs.environment }}.ini
          echo "$clean_ip ansible_user=root" >> ansible/inventory/${{ inputs.environment }}.ini
          echo "Using IP: $clean_ip"
          echo "CLEAN_IP=$clean_ip" >> $GITHUB_ENV

      - name: Setup SSH with Terraform Key
        run: |
          eval $(ssh-agent -s)
          ssh-add $SSH_KEY_FILE
          mkdir -p ~/.ssh
          ssh-keyscan -H $CLEAN_IP >> ~/.ssh/known_hosts

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible + Collections
        run: |
          pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Ansible Playbook
        working-directory: ./ansible
        env:
          ENVIRONMENT: ${{ inputs.environment }}
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          ODOO_DB: ${{ vars.ODOO_DB }}
          ODOO_USERNAME: ${{ vars.ODOO_USERNAME }}
          ODOO_PASSWORD: ${{ secrets.ODOO_PASSWORD }}
          PG_URI: postgresql://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}
        run: |
          ansible-playbook \
            -i inventory/${{ inputs.environment }}.ini \
            playbooks/deploy-odoo.yml \
            --extra-vars "ansible_ssh_retries=5 ansible_ssh_timeout=30 github_token=$GIT_TOKEN github_user=${{ vars.GITHUB_USER }} openai_api_key=$OPENAI_API_KEY"

      - name: Show container logs on failure
        if: ${{ failure() }}
        run: |
          ssh -o StrictHostKeyChecking=no root@$CLEAN_IP "cd /home/odoo/${{ inputs.environment }} && docker-compose logs"
