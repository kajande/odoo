name: Odoo Infra & Deploy

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: apply
        type: choice
        options:
          - apply
          - destroy

jobs:
  terraform-provision:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -var "do_token=${{ secrets.DO_TOKEN }}" -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"

      - name: Save droplet IP to file
        working-directory: ./terraform
        env:
          TERRAFORM_CLI_NO_WRAPPER: true
        run: terraform output -raw droplet_ip > droplet_ip.txt

      - name: Upload IP as artifact
        uses: actions/upload-artifact@v4
        with:
          name: droplet-ip
          path: ./terraform/droplet_ip.txt
          retention-days: 1

  deploy-odoo:
    runs-on: ubuntu-latest
    needs: [terraform-provision]
    if: |
      github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Try to download droplet IP artifact
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: droplet-ip
          path: .

      - name: Determine Droplet IP (artifact or DO API)
        id: get-ip
        run: |
          if [ -f droplet_ip.txt ]; then
            # Extract only IP address (first field)
            ip=$(grep -oE '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' droplet_ip.txt | head -n1)
            echo "Found IP in artifact: $ip"
          else
            echo "Artifact not found, using DigitalOcean API..."
            ip=$(curl -s -H "Authorization: Bearer ${{ secrets.DO_TOKEN }}" \
              "https://api.digitalocean.com/v2/droplets" | \
              jq -r --arg name "${{ secrets.DROPLET_NAME }}" '.droplets[] | select(.name==$name) | .networks.v4[] | select(.type=="public") | .ip_address')
            if [ -z "$ip" ]; then
              echo "❌ Failed to fetch IP from DigitalOcean API"
              exit 1
            fi
          fi
          echo "ip=$ip" >> $GITHUB_OUTPUT

      - name: Deploy to Odoo Droplet
        run: |
          echo "Deploying to ${{ steps.get-ip.outputs.ip }}"
          ssh -o StrictHostKeyChecking=no root@${{ steps.get-ip.outputs.ip }} << 'EOF'
            set -e
            cd /home/odoo
            git pull origin main
            docker-compose down -v --remove-orphans || true
            docker system prune -af --volumes || true
            docker-compose up --build -d
          EOF

  terraform-destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve -var "do_token=${{ secrets.DO_TOKEN }}" -var "ssh_public_key=${{ secrets.SSH_PUBLIC_KEY }}" -var "ssh_private_key=${{ secrets.SSH_PRIVATE_KEY }}"
