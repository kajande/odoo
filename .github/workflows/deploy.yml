name: Odoo Infra & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: apply
        type: choice
        options:
          - apply
          - destroy

env:
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  terraform-provision:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Install jq and curl
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Generate .auto.tfvars file
        working-directory: ./terraform
        run: |
          cat <<EOF > vars.auto.tfvars
          do_token = "${{ secrets.DO_TOKEN }}"
          ssh_public_key = <<EOTPUB
          ${{ secrets.SSH_PUBLIC_KEY }}
          EOTPUB
          ssh_private_key = <<EOT
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOT
          EOF

      - name: Terraform Init (Cloud)
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform apply -auto-approve

      - name: Create Ansible inventory
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          ip=$(terraform output -raw reserved_ip)
          clean_ip=$(echo "$ip" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
          mkdir -p ../ansible/inventory
          echo "[odoo]" > ../ansible/inventory/production.ini
          echo "$clean_ip ansible_user=root" >> ../ansible/inventory/production.ini
          echo "Generated inventory:"
          cat ../ansible/inventory/production.ini

      - name: Upload inventory artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-inventory
          path: ansible/inventory/production.ini
          retention-days: 1

  ansible-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-provision]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    outputs:
      deployment-completed: ${{ steps.mark-complete.outputs.completed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Download inventory
        uses: actions/download-artifact@v4
        with:
          name: ansible-inventory
          path: ansible/inventory/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible + Collections
        run: |
          pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Ansible Playbook
        working-directory: ./ansible
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          ODOO_DB: ${{ vars.ODOO_DB }}
          ODOO_USERNAME: ${{ vars.ODOO_USERNAME }}
          ODOO_PASSWORD: ${{ secrets.ODOO_PASSWORD }}
          # Construct PG_URI from components
          PG_URI: postgresql://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}
        run: |
          ANSIBLE_FORCE_COLOR=1 ansible-playbook \
            -i inventory/production.ini \
            playbooks/deploy-odoo.yml \
            --extra-vars "ansible_ssh_retries=5 ansible_ssh_timeout=30 github_token=$GIT_TOKEN github_user=${{ vars.GITHUB_USER }} openai_api_key=$OPENAI_API_KEY"

      - name: Mark deployment complete
        id: mark-complete
        run: |
          echo "completed=true" >> $GITHUB_OUTPUT
          echo "DEPLOYMENT_COMPLETED=true" >> $GITHUB_ENV

      - name: Create deployment success marker
        run: |
          # Create a deployment marker that can be checked by subsequent runs
          echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_ENV
          echo "Deployment completed successfully at $(date)"

      - name: Show container logs on failure
        if: ${{ failure() }}
        run: |
          ip=$(grep -Eo '[0-9.]+' ansible/inventory/production.ini)
          ssh -o StrictHostKeyChecking=no root@$ip "cd /home/odoo && docker-compose logs"

  check-deployment-status:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      can-deploy: ${{ steps.check.outputs.can-deploy }}
    steps:
      - name: Check if initial deployment completed
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for successful ansible-deploy jobs..."
          
          # Get all workflow runs for this repository, focusing on completed ones
          recent_runs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=completed&per_page=20&event=workflow_dispatch")
          
          echo "Found workflow runs:"
          echo "$recent_runs" | jq -r '.workflow_runs[] | "\(.id) - \(.conclusion) - \(.event) - \(.created_at)"'
          
          # Look for successful workflow_dispatch runs
          successful_runs=$(echo "$recent_runs" | jq -r '
            .workflow_runs[] | 
            select(.conclusion == "success" and .event == "workflow_dispatch") | 
            .id')
          
          echo "Successful workflow_dispatch runs: $successful_runs"
          
          found_successful_deploy=false
          
          # Check each successful run for ansible-deploy job
          for run_id in $successful_runs; do
            echo "Checking run $run_id for ansible-deploy job..."
            
            jobs=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/jobs")
            
            ansible_job=$(echo "$jobs" | jq -r '
              .jobs[] | 
              select(.name == "ansible-deploy")')
            
            if [ -n "$ansible_job" ]; then
              ansible_conclusion=$(echo "$ansible_job" | jq -r '.conclusion')
              echo "Found ansible-deploy job with conclusion: $ansible_conclusion"
              
              if [ "$ansible_conclusion" = "success" ]; then
                echo "✅ Found successful ansible-deploy job in run $run_id"
                found_successful_deploy=true
                break
              fi
            fi
          done
          
          if [ "$found_successful_deploy" = "true" ]; then
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Can deploy - found successful ansible-deploy job"
          else
            echo "can-deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Cannot deploy - no successful ansible-deploy job found"
            echo "This is expected for the first run. Please run 'terraform apply' via workflow_dispatch first."
          fi

  deploy-on-push:
    runs-on: ubuntu-latest
    needs: [check-deployment-status]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check-deployment-status.outputs.can-deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Install dependencies (jq)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Install doctl
        run: |
          curl -sL https://github.com/digitalocean/doctl/releases/download/v1.104.0/doctl-1.104.0-linux-amd64.tar.gz | tar -xzv
          sudo mv doctl /usr/local/bin

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine Droplet IP
        id: get-ip
        run: |
          clean_ip=$(doctl -t ${{ secrets.DO_TOKEN }} compute droplet list --tag-name odoo --format PublicIPv4 --no-header | head -n1)

          if [ -z "$clean_ip" ]; then
            echo "::error::No active droplets found with tag 'odoo'"
            exit 1
          fi

          rm -f ansible/inventory/*
          mkdir -p ansible/inventory
          echo "[odoo]" > ansible/inventory/production.ini
          echo "$clean_ip ansible_user=root" >> ansible/inventory/production.ini
          echo "Using IP: $clean_ip"

      - name: Verify SSH connectivity
        timeout-minutes: 5
        run: |
          ip=$(grep -Eo '[0-9.]+' ansible/inventory/production.ini)
          echo "Testing SSH connection to $ip"

          for i in {1..10}; do
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$ip exit 2>/dev/null
            if [ $? -eq 0 ]; then
              echo "SSH connection successful"
              exit 0
            fi
            echo "SSH attempt $i/10 failed, retrying in 15 seconds..."
            sleep 15
          done
          echo "::error::Failed to establish SSH connection"
          exit 1

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible + Collections
        run: |
          pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Update Playbook
        working-directory: ./ansible
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ vars.DB_NAME }}
          PGPASSWORD: ${{ secrets.PGPASSWORD }}
          ODOO_DB: ${{ vars.ODOO_DB }}
          ODOO_USERNAME: ${{ vars.ODOO_USERNAME }}
          ODOO_PASSWORD: ${{ secrets.ODOO_PASSWORD }}
          PG_URI: postgresql://${{ vars.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ vars.DB_HOST }}:${{ vars.DB_PORT }}/${{ vars.DB_NAME }}
          ANSIBLE_DISPLAY_SKIPPED_HOSTS: false
        run: |
          ANSIBLE_FORCE_COLOR=1 ansible-playbook \
            -i inventory/production.ini \
            playbooks/update-odoo.yml \
            --extra-vars "ansible_ssh_retries=5 ansible_ssh_timeout=30 github_token=$GIT_TOKEN github_user=${{ vars.GITHUB_USER }} openai_api_key=$OPENAI_API_KEY"

      - name: Show container logs on failure
        if: ${{ failure() }}
        run: |
          ip=$(grep -Eo '[0-9.]+' ansible/inventory/production.ini)
          ssh -o StrictHostKeyChecking=no root@$ip "cd /home/odoo && docker-compose logs"

  terraform-destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Generate .auto.tfvars file
        working-directory: ./terraform
        run: |
          cat <<EOF > vars.auto.tfvars
          do_token = "${{ secrets.DO_TOKEN }}"
          ssh_public_key = <<EOTPUB
          ${{ secrets.SSH_PUBLIC_KEY }}
          EOTPUB
          ssh_private_key = <<EOT
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOT
          EOF

      - name: Terraform Init (Cloud)
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform destroy -auto-approve
