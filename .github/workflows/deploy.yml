name: Odoo Infra & Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action'
        required: true
        default: apply
        type: choice
        options:
          - apply
          - destroy

env:
  ANSIBLE_FORCE_COLOR: 1
  ANSIBLE_HOST_KEY_CHECKING: false

jobs:
  terraform-provision:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Generate .auto.tfvars file
        working-directory: ./terraform
        run: |
          cat <<EOF > vars.auto.tfvars
          do_token = "${{ secrets.DO_TOKEN }}"
          ssh_public_key = <<EOTPUB
          ${{ secrets.SSH_PUBLIC_KEY }}
          EOTPUB
          ssh_private_key = <<EOT
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOT
          EOF

      - name: Terraform Init (Cloud)
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform apply -auto-approve

      - name: Create Ansible inventory
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: |
          ip=$(terraform output -raw droplet_ip)
          # Strip any non-IP characters
          clean_ip=$(echo "$ip" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
          mkdir -p ../ansible/inventory
          echo "[odoo]" > ../ansible/inventory/production.ini
          echo "$clean_ip ansible_user=root" >> ../ansible/inventory/production.ini
          echo "Generated inventory:"
          cat ../ansible/inventory/production.ini

      - name: Upload inventory artifact
        uses: actions/upload-artifact@v4
        with:
          name: ansible-inventory
          path: ansible/inventory/production.ini
          retention-days: 1

  ansible-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-provision]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Download inventory
        uses: actions/download-artifact@v4
        with:
          name: ansible-inventory
          path: ansible/inventory/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible + Collections
        run: |
          pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Ansible Playbook
        working-directory: ./ansible
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "Running playbook with inventory:"
          cat inventory/production.ini
          echo ""
          ANSIBLE_FORCE_COLOR=1 ansible-playbook \
            -i inventory/production.ini \
            playbooks/deploy-odoo.yml \
            --extra-vars "ansible_ssh_retries=5 ansible_ssh_timeout=30"

  deploy-on-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine Droplet IP
        id: get-ip
        run: |
          ip=$(curl -s -H "Authorization: Bearer ${{ secrets.DO_TOKEN }}" \
            "https://api.digitalocean.com/v2/droplets?tag_name=odoo" | \
            jq -r '.droplets[0].networks.v4[] | select(.type=="public") | .ip_address')
          clean_ip=$(echo "$ip" | grep -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
          mkdir -p ansible/inventory
          echo "[odoo]" > ansible/inventory/production.ini
          echo "$clean_ip ansible_user=root" >> ansible/inventory/production.ini

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Ansible + Collections
        run: |
          pip install ansible
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Run Update Playbook
        working-directory: ./ansible
        env:
          GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: |
          echo "Running lightweight update playbook with inventory:"
          cat inventory/production.ini
          echo ""
          ANSIBLE_FORCE_COLOR=1 ansible-playbook \
            -i inventory/production.ini \
            playbooks/update-odoo.yml \
            --extra-vars "ansible_ssh_retries=5 ansible_ssh_timeout=30"

  terraform-destroy:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GIT_TOKEN }}

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Generate .auto.tfvars file
        working-directory: ./terraform
        run: |
          cat <<EOF > vars.auto.tfvars
          do_token = "${{ secrets.DO_TOKEN }}"
          ssh_public_key = <<EOTPUB
          ${{ secrets.SSH_PUBLIC_KEY }}
          EOTPUB
          ssh_private_key = <<EOT
          ${{ secrets.SSH_PRIVATE_KEY }}
          EOT
          EOF

      - name: Terraform Init (Cloud)
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        env:
          TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
        run: terraform destroy -auto-approve
