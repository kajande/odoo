
#-> ordo_api/client.py
import requests

# Replace with your actual bearer token or auth credentials if needed
AUTH_TOKEN = "your-auth-token"  # Optional
server = "http://localhost:8069"
# server = "https://ordo.kajande.com"
URL = f"{server}/ordo/partners"

headers = {
    "Content-Type": "application/json",
    "Accept": "application/json",
    # Uncomment if authentication is required
    # "Authorization": f"Bearer {AUTH_TOKEN}",
}

def fetch_partners():
    try:
        response = requests.get(URL, headers=headers)
        response.raise_for_status()
        data = response.json()
        print("Partners:")
        for partner in data:
            print(f"- {partner['name']} ({partner['email']})")
    except requests.exceptions.RequestException as e:
        print("Error:", e)

if __name__ == "__main__":
    fetch_partners()

#-> ordo_api/__init__.py
from . import models

#-> ordo_api/__manifest__.py
{
    'name': 'Ordo API',
    'version': '18.0.1.0.0',
    'summary': 'Main API system for Ordo',
    'category': 'Chatbots',
    'depends': ['base', 'fastapi'],
    'data': [
        'data/demo_fastapi_user.xml',
        'data/demo_fastapi_group.xml',
    ],
    'installable': True,
    'application': False,
    'license': 'LGPL-3',
} # type: ignore

#-> ordo_api/data/demo_fastapi_user.xml
<odoo>
    <record
        id="my_demo_app_user"
        model="res.users"
        context="{'no_reset_password': True}"
    >
        <field name="name">My Demo Endpoint User</field>
        <field name="login">my_demo_app_user</field>
        <field name="groups_id" eval="[(6, 0, [])]" />
    </record>
</odoo>

#-> ordo_api/data/demo_fastapi_group.xml
<odoo>
    <record id="my_demo_app_group" model="res.groups">
        <field name="name">My Demo Endpoint Group</field>
        <field name="users" eval="[(4, ref('my_demo_app_user'))]" />
        <field name="implied_ids" eval="[(4, ref('fastapi.group_fastapi_endpoint_runner'))]" />
    </record>
</odoo>

#-> ordo_api/models/__init__.py
from . import fastapi_endpoint

#-> ordo_api/models/fastapi_endpoint.py
from typing import Annotated, Optional
from fastapi import APIRouter, Depends
from pydantic import BaseModel

from odoo import fields, models
from odoo.api import Environment
from odoo.addons.fastapi.dependencies import odoo_env

class FastapiEndpoint(models.Model):
    _inherit = "fastapi.endpoint"

    app: str = fields.Selection(
        selection_add=[("demo", "Demo Endpoint")],
        ondelete={"demo": "cascade"}
    )

    def _get_fastapi_routers(self):
        if self.app == "demo":
            return [demo_api_router]
        return super()._get_fastapi_routers()

demo_api_router = APIRouter()

class PartnerInfo(BaseModel):
    name: str
    email: Optional[str]

@demo_api_router.get("/partners", response_model=list[PartnerInfo])
def get_partners(env: Annotated[Environment, Depends(odoo_env)]) -> list[PartnerInfo]:
    return [
        PartnerInfo(
            name=partner.name,
            email=partner.email or None
        )
        for partner in env["res.partner"].search([])
    ]
